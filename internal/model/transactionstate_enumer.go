// Code generated by "enumer -type=TransactionState -json -sql -transform=upper -trimprefix=TransactionState -values"; DO NOT EDIT.

package model

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TransactionStateName = "WINLOSE"

var _TransactionStateIndex = [...]uint8{0, 3, 7}

const _TransactionStateLowerName = "winlose"

func (i TransactionState) String() string {
	if i < 0 || i >= TransactionState(len(_TransactionStateIndex)-1) {
		return fmt.Sprintf("TransactionState(%d)", i)
	}
	return _TransactionStateName[_TransactionStateIndex[i]:_TransactionStateIndex[i+1]]
}

func (TransactionState) Values() []string {
	return TransactionStateStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TransactionStateNoOp() {
	var x [1]struct{}
	_ = x[TransactionStateWin-(0)]
	_ = x[TransactionStateLose-(1)]
}

var _TransactionStateValues = []TransactionState{TransactionStateWin, TransactionStateLose}

var _TransactionStateNameToValueMap = map[string]TransactionState{
	_TransactionStateName[0:3]:      TransactionStateWin,
	_TransactionStateLowerName[0:3]: TransactionStateWin,
	_TransactionStateName[3:7]:      TransactionStateLose,
	_TransactionStateLowerName[3:7]: TransactionStateLose,
}

var _TransactionStateNames = []string{
	_TransactionStateName[0:3],
	_TransactionStateName[3:7],
}

// TransactionStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TransactionStateString(s string) (TransactionState, error) {
	if val, ok := _TransactionStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TransactionStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TransactionState values", s)
}

// TransactionStateValues returns all values of the enum
func TransactionStateValues() []TransactionState {
	return _TransactionStateValues
}

// TransactionStateStrings returns a slice of all String values of the enum
func TransactionStateStrings() []string {
	strs := make([]string, len(_TransactionStateNames))
	copy(strs, _TransactionStateNames)
	return strs
}

// IsATransactionState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TransactionState) IsATransactionState() bool {
	for _, v := range _TransactionStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TransactionState
func (i TransactionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TransactionState
func (i *TransactionState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TransactionState should be a string, got %s", data)
	}

	var err error
	*i, err = TransactionStateString(s)
	return err
}

func (i TransactionState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TransactionState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of TransactionState: %[1]T(%[1]v)", value)
	}

	val, err := TransactionStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
