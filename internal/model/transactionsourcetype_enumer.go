// Code generated by "enumer -type=TransactionSourceType -json -sql -transform=upper -trimprefix=TransactionSourceType -values"; DO NOT EDIT.

package model

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TransactionSourceTypeName = "GAMESERVERPAYMENT"

var _TransactionSourceTypeIndex = [...]uint8{0, 4, 10, 17}

const _TransactionSourceTypeLowerName = "gameserverpayment"

func (i TransactionSourceType) String() string {
	if i < 0 || i >= TransactionSourceType(len(_TransactionSourceTypeIndex)-1) {
		return fmt.Sprintf("TransactionSourceType(%d)", i)
	}
	return _TransactionSourceTypeName[_TransactionSourceTypeIndex[i]:_TransactionSourceTypeIndex[i+1]]
}

func (TransactionSourceType) Values() []string {
	return TransactionSourceTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TransactionSourceTypeNoOp() {
	var x [1]struct{}
	_ = x[TransactionSourceTypeGame-(0)]
	_ = x[TransactionSourceTypeServer-(1)]
	_ = x[TransactionSourceTypePayment-(2)]
}

var _TransactionSourceTypeValues = []TransactionSourceType{TransactionSourceTypeGame, TransactionSourceTypeServer, TransactionSourceTypePayment}

var _TransactionSourceTypeNameToValueMap = map[string]TransactionSourceType{
	_TransactionSourceTypeName[0:4]:        TransactionSourceTypeGame,
	_TransactionSourceTypeLowerName[0:4]:   TransactionSourceTypeGame,
	_TransactionSourceTypeName[4:10]:       TransactionSourceTypeServer,
	_TransactionSourceTypeLowerName[4:10]:  TransactionSourceTypeServer,
	_TransactionSourceTypeName[10:17]:      TransactionSourceTypePayment,
	_TransactionSourceTypeLowerName[10:17]: TransactionSourceTypePayment,
}

var _TransactionSourceTypeNames = []string{
	_TransactionSourceTypeName[0:4],
	_TransactionSourceTypeName[4:10],
	_TransactionSourceTypeName[10:17],
}

// TransactionSourceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TransactionSourceTypeString(s string) (TransactionSourceType, error) {
	if val, ok := _TransactionSourceTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TransactionSourceTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TransactionSourceType values", s)
}

// TransactionSourceTypeValues returns all values of the enum
func TransactionSourceTypeValues() []TransactionSourceType {
	return _TransactionSourceTypeValues
}

// TransactionSourceTypeStrings returns a slice of all String values of the enum
func TransactionSourceTypeStrings() []string {
	strs := make([]string, len(_TransactionSourceTypeNames))
	copy(strs, _TransactionSourceTypeNames)
	return strs
}

// IsATransactionSourceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TransactionSourceType) IsATransactionSourceType() bool {
	for _, v := range _TransactionSourceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TransactionSourceType
func (i TransactionSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TransactionSourceType
func (i *TransactionSourceType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TransactionSourceType should be a string, got %s", data)
	}

	var err error
	*i, err = TransactionSourceTypeString(s)
	return err
}

func (i TransactionSourceType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TransactionSourceType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of TransactionSourceType: %[1]T(%[1]v)", value)
	}

	val, err := TransactionSourceTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
