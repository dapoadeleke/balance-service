// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/dapoadeleke/balance-service/internal/db"
	mock "github.com/stretchr/testify/mock"

	model "github.com/dapoadeleke/balance-service/internal/model"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// FindTransactionByTransactionID provides a mock function with given fields: ctx, id
func (_m *Transaction) FindTransactionByTransactionID(ctx context.Context, id string) (model.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindTransactionByTransactionID")
	}

	var r0 model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTransactionWithTx provides a mock function with given fields: ctx, tx, transaction
func (_m *Transaction) SaveTransactionWithTx(ctx context.Context, tx db.Tx, transaction model.Transaction) (model.Transaction, error) {
	ret := _m.Called(ctx, tx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransactionWithTx")
	}

	var r0 model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Tx, model.Transaction) (model.Transaction, error)); ok {
		return rf(ctx, tx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.Tx, model.Transaction) model.Transaction); ok {
		r0 = rf(ctx, tx, transaction)
	} else {
		r0 = ret.Get(0).(model.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.Tx, model.Transaction) error); ok {
		r1 = rf(ctx, tx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
