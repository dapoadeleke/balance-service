// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/dapoadeleke/balance-service/internal/db"
	mock "github.com/stretchr/testify/mock"

	model "github.com/dapoadeleke/balance-service/internal/model"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// FindUserByID provides a mock function with given fields: ctx, id
func (_m *User) FindUserByID(ctx context.Context, id uint64) (model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) model.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserWithTx provides a mock function with given fields: ctx, tx, user
func (_m *User) SaveUserWithTx(ctx context.Context, tx db.Tx, user model.User) (model.User, error) {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserWithTx")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Tx, model.User) (model.User, error)); ok {
		return rf(ctx, tx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.Tx, model.User) model.User); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.Tx, model.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
